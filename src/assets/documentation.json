{
  "sections": [
    {
      "id": "getting-started",
      "title": "Getting Started",
      "icon": "Home",
      "pages": [
        {
          "id": "introduction",
          "title": "Introduction",
          "content": "# Welcome to Our Documentation\n\nThis comprehensive guide will help you get started with our platform. Our documentation is designed to be clear, concise, and actionable.\n\n## What you'll learn\n\n- How to set up your development environment\n- Core concepts and terminology\n- Best practices and common patterns\n- Advanced features and customization\n\n## Prerequisites\n\nBefore you begin, ensure you have:\n- Node.js 16+ installed\n- Basic knowledge of JavaScript\n- A text editor or IDE\n\nLet's dive in and start building something amazing!"
        },
        {
          "id": "installation",
          "title": "Installation",
          "content": "# Installation Guide\n\nGetting up and running is quick and easy. Follow these steps to install our platform.\n\n## Quick Start\n\n```bash\nnpm install @ourplatform/core\n```\n\n## Manual Installation\n\nIf you prefer to install manually:\n\n1. Download the latest release\n2. Extract the files to your project directory\n3. Install dependencies\n\n```bash\ncd your-project\nnpm install\nnpm start\n```\n\n## Verification\n\nTo verify the installation was successful:\n\n```javascript\nimport { verify } from '@ourplatform/core';\nconsole.log(verify()); // Should return true\n```"
        },
        {
          "id": "configuration",
          "title": "Configuration",
          "content": "# Configuration Options\n\nCustomize the platform to fit your specific needs with our flexible configuration system.\n\n## Basic Configuration\n\nCreate a `config.json` file in your project root:\n\n```json\n{\n  \"apiUrl\": \"https://api.example.com\",\n  \"theme\": \"light\",\n  \"debug\": false\n}\n```\n\n## Environment Variables\n\nYou can also use environment variables:\n\n- `API_URL` - Your API endpoint\n- `THEME` - UI theme (light/dark)\n- `DEBUG` - Enable debug mode\n\n## Advanced Options\n\nFor advanced users, additional configuration options are available in the settings panel."
        }
      ]
    },
    {
      "id": "api-reference",
      "title": "API Reference",
      "icon": "Code",
      "pages": [
        {
          "id": "authentication",
          "title": "Authentication",
          "content": "# Authentication\n\nSecure your API calls with our robust authentication system.\n\n## API Key Authentication\n\nThe simplest way to authenticate:\n\n```javascript\nconst response = await fetch('/api/data', {\n  headers: {\n    'Authorization': 'Bearer YOUR_API_KEY'\n  }\n});\n```\n\n## OAuth 2.0\n\nFor more complex scenarios, use OAuth 2.0:\n\n```javascript\nconst authUrl = 'https://auth.example.com/oauth/authorize';\nconst clientId = 'your_client_id';\nconst redirectUri = 'https://yourapp.com/callback';\n\nwindow.location.href = `${authUrl}?client_id=${clientId}&redirect_uri=${redirectUri}`;\n```\n\n## Best Practices\n\n- Never expose API keys in client-side code\n- Use environment variables for sensitive data\n- Implement proper token refresh logic"
        },
        {
          "id": "endpoints",
          "title": "API Endpoints",
          "content": "# API Endpoints\n\nComplete reference for all available API endpoints.\n\n## Users\n\n### GET /api/users\nRetrieve all users\n\n**Parameters:**\n- `limit` (optional): Number of users to return\n- `offset` (optional): Offset for pagination\n\n**Response:**\n```json\n{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\"\n    }\n  ],\n  \"total\": 100\n}\n```\n\n### POST /api/users\nCreate a new user\n\n**Request Body:**\n```json\n{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane@example.com\"\n}\n```\n\n## Data\n\n### GET /api/data\nRetrieve application data with filtering and sorting options."
        }
      ]
    },
    {
      "id": "guides",
      "title": "Guides & Tutorials",
      "icon": "FileText",
      "pages": [
        {
          "id": "best-practices",
          "title": "Best Practices",
          "content": "# Best Practices\n\nFollow these guidelines to build maintainable and scalable applications.\n\n## Code Organization\n\nStructure your code for maximum readability and maintainability:\n\n```\nsrc/\n  components/\n    common/\n    pages/\n  services/\n  utils/\n  types/\n```\n\n## Performance Tips\n\n1. **Lazy Loading**: Load components only when needed\n2. **Memoization**: Use React.memo for expensive components\n3. **Bundle Splitting**: Split your code for faster loading\n\n## Security Considerations\n\n- Always validate user input\n- Use HTTPS in production\n- Implement proper CORS policies\n- Regular security audits\n\n## Testing Strategy\n\nWrite tests that provide confidence:\n- Unit tests for business logic\n- Integration tests for API interactions\n- E2E tests for critical user flows"
        },
        {
          "id": "debugging",
          "title": "Debugging & Troubleshooting",
          "content": "# Debugging and Troubleshooting\n\nSometimes things don’t go as planned, but don’t worry—we’ve got you covered.\n\n## Common Errors and Fixes\n\n- **Error 500 (Internal Server Error):** Check server logs for detailed error message\n- **Error 404 (Not Found):** Ensure the endpoint URL is correct\n- **Error 401 (Unauthorized):** Verify your API key or authentication token\n\n## Debugging Tips\n\n- Enable debug mode in the configuration to get more detailed logs\n- Use `console.log()` to trace through your code\n- Check network requests in the browser’s developer tools\n\n## Helpful Tools\n\n- **Postman**: A tool for testing APIs\n- **Node.js Debugger**: Built-in debugger for tracking down errors"
        },
        {
          "id": "advanced-features",
          "title": "Advanced Features",
          "content": "# Advanced Features\n\nTake your project to the next level with these advanced platform features.\n\n## Custom Middleware\n\nYou can create custom middleware to intercept requests and modify responses. Here's an example:\n\n```javascript\napp.use((req, res, next) => {\n  console.log('Custom Middleware Activated');\n  next();\n});\n```\n\n## Real-Time Updates\n\nUsing WebSockets, you can subscribe to real-time events:\n\n```javascript\nconst socket = new WebSocket('wss://example.com/updates');\n\nsocket.onmessage = function(event) {\n  console.log('Real-time update received:', event.data);\n};\n```\n\n## Performance Tuning\n\n- Use caching strategies for frequent API requests\n- Implement lazy loading for resources\n- Optimize queries for database access"
        }
      ]
    }
  ]
}
